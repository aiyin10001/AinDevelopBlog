[{"content":"验证所有分类和标签 分类如下： 标签 文案颜色 背景颜色 Java Kotlin Android Android 音视频 跨端 标签如下： 标签 文案颜色 背景颜色 Android ","date":"2025-10-29T14:16:14+08:00","image":"http://localhost:1313/p/%E6%A0%87%E7%AD%BE%E9%AA%8C%E8%AF%81/e20ffcc2232b4471a8926035d6b0a10a_hu_267b6f277ba813cc.jpg","permalink":"http://localhost:1313/p/%E6%A0%87%E7%AD%BE%E9%AA%8C%E8%AF%81/","title":"标签验证"},{"content":"Android App启动完整流程详解 1. 系统层启动流程 Launcher点击应用图标 Launcher进程捕获用户点击事件 通过PackageManagerService查询目标应用的AndroidManifest.xml信息 获取应用的启动Intent和组件信息 调用ActivityManagerService(AMS)发起启动Activity的请求 AMS处理启动请求 ActivityManagerService接收启动请求 检查应用权限、用户权限和应用状态 通过ProcessManager判断是否需要创建新进程 如果需要新进程，则通过Zygote进程孵化新的应用进程 Zygote通过fork机制创建新的应用进程，并初始化基本运行环境 2. 应用进程初始化 Application启动 创建Application对象实例 调用Application.onCreate()方法 在此阶段可以初始化全局配置、第三方SDK、数据库等 执行ContentProvider的初始化（如果有声明） 主线程准备 创建主线程的Looper对象 初始化Handler消息机制 准备主线程的消息循环队列 确保UI线程可以处理各种系统事件和用户交互 3. Activity启动流程 Activity创建阶段 通过Instrumentation创建Activity实例 调用Activity.onCreate()方法 执行setContentView()加载布局文件 初始化UI组件和数据绑定 调用相关Fragment的创建和添加逻辑 生命周期回调 Activity.onStart(): Activity变为可见状态 Activity.onResume(): Activity获得焦点，可以接收用户交互 此时Activity进入运行状态，显示在前台 4. 界面显示阶段 视图渲染过程 构建View树结构 执行View的测量(measure)、布局(layout)、绘制(draw)三大流程 通过SurfaceFlinger服务进行界面合成 利用GPU加速渲染界面内容 用户交互就绪 注册触摸事件监听器 建立完整的事件分发机制 应用进入正常运行状态，可以响应各种用户操作 系统开始处理各种输入事件和后台任务 ","date":"2025-10-23T15:42:32+08:00","image":"http://localhost:1313/p/android-app-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/the%20Android%20App%20startup%20process_hu_d65c8df6106e09c7.png","permalink":"http://localhost:1313/p/android-app-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/","title":"Android App 启动流程"}]